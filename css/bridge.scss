---
---
/*
    CORE
    Settings and main functionalities
    Include _core.scss to get all the functions and mixins
    No CSS declaration is compiled from this file
    Only core functions, mixins and variables
    You may include this file in any SASS file, no changes will be made
    Only core functions
*/
@import 'briks/core';
/*
    SETTINGS
    User settings
*/
@import 'briks/settings/briks';
/*
    Import only CSS Variables
*/
@import 'briks/css-vars';

/*
    BRIDGE TO JS
    Build a JSON through content property
*/
$content: '{';
// Prefix for the CSS variables
$content: $content+'"briks-css-variables-prefix": "'+$briks-css-variables-prefix+'",';

$content: $content+'"briks-globals":';
$content: $content+'[';
    $content: $content+'"briks-unit",';
    $content: $content+'"briks-components-prefix",';
    $content: $content+'"briks-modifiers-prefix",';
    $content: $content+'"briks-utilities-prefix",';
    $content: $content+'"briks-responsive-prefix"';
$content: $content+'],';

// COLORS
$content: $content+'"briks-colors":';
$content-temp: $briks-colors;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// SCREEN SIZES
$content: $content+'"briks-screen-sizes":';
$content-temp: $briks-screen-sizes;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// FONT FAMILIES
$content: $content+'"briks-fonts":';
$content-temp: $briks-fonts;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// FONT SIZES
$content: $content+'"briks-font-sizes":';
$content-temp: $briks-font-sizes;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// TYPOGRAPHY
$content: $content+'"briks-typography":';
$content-temp: $briks-typography;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// SPACINGS
$content: $content+'"briks-spacings":';
$content-temp: $briks-spacings;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// BORDERS
$content: $content+'"briks-borders":';
$content-temp: $briks-borders;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// BORDER RADIUS
$content: $content+'"briks-border-radius":';
$content-temp: $briks-border-radius;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// SHADOWS
$content: $content+'"briks-shadows":';
$content-temp: $briks-shadows;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// BACKGROUNDS
$content: $content+'"briks-backgrounds":';
$content-temp: $briks-backgrounds;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'"'+$name+'"';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+'],';

// UTILITIES
$content: $content+'"briks-utilities":';
$content-temp: $briks-utilities;
$content: $content+'[';
@each $name, $value in $content-temp {
    $content: $content+'{';
        $content: $content+'"property": "'+$name+'",';
        $content: $content+'"enabled": "'+map-get($value, enabled)+'",';
        $content: $content+'"prefix": "'+map-get($value, prefix)+'",';
        $content: $content+'"responsive": "'+map-get($value, responsive)+'",';
        $content: $content+'"names-and-values": {';
            @each $u_name, $u_value in map-get($value, names-and-values) {
                @if $name == 'font-family' {
                    @if type-of(map-get($u_value, name)) == string {
                        $content: $content+'"'+$u_name+'": "'+map-get($u_value, name)+', '+map-get($u_value, fallback)+'"';
                    } @else {
                        $content: $content+'"'+$u_name+'": "'+map-get($u_value, name)+'"';
                    }
                } @else {
                    $content: $content+'"'+$u_name+'": "'+$u_value+'"';
                }
                @if index((map-get($value, names-and-values)), ($u_name $u_value)) != length(map-get($value, names-and-values)) {
                    $content: $content+',';
                }
            }
        $content: $content+'}';
    $content: $content+'}';
    @if index(($content-temp), ($name $value)) != length($content-temp) {
        $content: $content+',';
    }
}
$content: $content+']';


/*
    BRIKS BRIDGE
    @data - any type of data
    @return a normalized string to be properly parsed for design-system.js and style guide
*/
@function briks-bridge($data) {
    $stringified: '';
    @if type-of($data) == 'map' {
        $stringified: '(';
        @each $name, $value in $data {
            // Get the index and compare to length
            // @warn index(($data), ($name $value)) +' '+ length($data);
            @if type-of($value) == map {
                // @warn $name;
                $stringified: $stringified+'(';
                @each $name_sub, $value_sub in $value {
                    $stringified: $stringified+$name_sub+':'+$value_sub;
                    @if index(($value), ($name_sub $value_sub)) != length($value) {
                        $stringified: $stringified+'||';
                    }
                }
                $stringified: $stringified+')';
            } @else {
                $stringified: $stringified+$name+':'+$value;
                @if index(($data), ($name $value)) != length($data) {
                    $stringified: $stringified+'||';
                }
            }
        }
        $stringified: $stringified+')';
    }
    @if type-of($data) == 'list' {
        // @warn $data+' is a list';
        @each $value in $data {
            $stringified: $stringified+$value;
            @if index(($data), ($value)) != length($data) {
                $stringified: $stringified+'||';
            }
        }
    }
    @if type-of($data) == 'bool' or type-of($data) == 'number' or type-of($data) == 'string' or type-of($data) == 'color' or type-of($data) == 'null' {
        $stringified: $data;
    }
    @if $data == '' {
        $stringified: 'null';
    }
    @return $stringified;
}
// :root {
//     @each $property, $data in $briks-utilities {
//         --briks-utilities__#{$property}__enabled: #{briks-bridge(map-get($data, enabled))};
//         --briks-utilities__#{$property}__prefix: #{briks-bridge(map-get($data, prefix))};
//         --briks-utilities__#{$property}__names-and-values: #{briks-bridge(map-get($data, names-and-values))};
//         --briks-utilities__#{$property}__additional-names-and-values: #{briks-bridge(map-get($data, additional-names-and-values))};
//         --briks-utilities__#{$property}__responsive: #{briks-bridge(map-get($data, responsive))};
//     }
// }

// End of JSON
$content: $content+'}';
body {
    content: quote($content);
}